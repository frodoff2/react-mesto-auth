{"ast":null,"code":"export class Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this.baseUrl = baseUrl;\n    this.headers = headers;\n  }\n\n  getInfo() {\n    return fetch(this.baseUrl, {\n      method: 'GET',\n      headers: this.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } // если ошибка, отклоняем промис\n\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  getInitialCards() {\n    return fetch('https://mesto.nomoreparties.co/v1/cohort-12/cards', {\n      method: 'GET',\n      headers: this.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } // если ошибка, отклоняем промис\n\n\n      return Promise.reject(`Карточки не загружены: ${res.status}`);\n    });\n  }\n\n  editProfile(name, about) {\n    return fetch(this.baseUrl, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } // если ошибка, отклоняем промис\n\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  addNewCard(name, link) {\n    return fetch('https://mesto.nomoreparties.co/v1/cohort-12/cards', {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } // если ошибка, отклоняем промис\n\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return fetch(`https://mesto.nomoreparties.co/v1/cohort-12/cards/likes/${id}`, {\n        method: 'DELETE',\n        headers: this.headers\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        } // если ошибка, отклоняем промис\n\n\n        return Promise.reject(`Ошибка: ${res.status}`);\n      });\n    } else {\n      return fetch(`https://mesto.nomoreparties.co/v1/cohort-12/cards/likes/${id}`, {\n        method: 'PUT',\n        headers: this.headers\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        } // если ошибка, отклоняем промис\n\n\n        return Promise.reject(`Ошибка: ${res.status}`);\n      });\n    }\n  }\n\n  deleteCard(id) {\n    return fetch(`https://mesto.nomoreparties.co/v1/cohort-12/cards/${id}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } // если ошибка, отклоняем промис\n\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  changeAvatar(avatar) {\n    return fetch('https://mesto.nomoreparties.co/v1/cohort-12/users/me/avatar', {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } // если ошибка, отклоняем промис\n\n\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n} // создаем экземпляр \n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-12/users/me',\n  headers: {\n    authorization: '8eaaf06a-2ca4-4be0-bedd-db145fddf3b1',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/assetmurzabayev/Desktop/react-mesto-auth/src/utils/API.js"],"names":["Api","constructor","baseUrl","headers","getInfo","fetch","method","then","res","ok","json","Promise","reject","status","getInitialCards","editProfile","name","about","body","JSON","stringify","addNewCard","link","changeLikeCardStatus","id","isLiked","deleteCard","changeAvatar","avatar","api","authorization"],"mappings":"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","sourcesContent":["\n\nexport class Api {\n  constructor({ baseUrl, headers }) {\n  this.baseUrl = baseUrl;\n  this.headers = headers;\n  }\n\n  getInfo() {\n    return fetch( this.baseUrl, {  \n        method: 'GET', \n        headers: this.headers \n      })\n      .then(res => {\n        if (res.ok) {\n        return res.json();\n        }\n        // если ошибка, отклоняем промис\n        return Promise.reject(`Ошибка: ${res.status}`);\n      })\n  }\n\n  getInitialCards() {\n    return fetch('https://mesto.nomoreparties.co/v1/cohort-12/cards', { \n      method: 'GET',\n      headers: this.headers   \n    })\n    .then(res => {\n      if (res.ok) {\n          return res.json();\n      }\n      // если ошибка, отклоняем промис\n      return Promise.reject(`Карточки не загружены: ${res.status}`);\n      })\n  }\n\n  editProfile(name, about) {\n    return fetch(this.baseUrl, {\n      method: 'PATCH', \n      headers: this.headers,\n      body: JSON.stringify({\n          name: name,\n          about: about\n        })\n      })\n      .then(res => {\n      if (res.ok) {\n      return res.json();\n      }\n      // если ошибка, отклоняем промис\n      return Promise.reject(`Ошибка: ${res.status}`);\n    })\n  }\n  \n  addNewCard(name, link) {\n      return fetch('https://mesto.nomoreparties.co/v1/cohort-12/cards', {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify({\n          name: name,\n          link: link\n        }) \n      })\n      .then(res => {\n          if (res.ok) {\n          return res.json();\n          }\n          // если ошибка, отклоняем промис\n          return Promise.reject(`Ошибка: ${res.status}`);\n        })\n  }\n  \n\n  changeLikeCardStatus(id, isLiked) {\n  if (isLiked) {\n    return fetch(`https://mesto.nomoreparties.co/v1/cohort-12/cards/likes/${id}`, {\n      method: 'DELETE',\n      headers: this.headers,\n      }) \n      .then(res => {\n       if (res.ok) {\n       return res.json();\n       }\n       // если ошибка, отклоняем промис\n       return Promise.reject(`Ошибка: ${res.status}`);\n     })\n  } else {\n    return fetch(`https://mesto.nomoreparties.co/v1/cohort-12/cards/likes/${id}`, {\n      method: 'PUT',\n      headers: this.headers,\n      }) \n      .then(res => {\n       if (res.ok) {\n       return res.json();\n       }\n       // если ошибка, отклоняем промис\n       return Promise.reject(`Ошибка: ${res.status}`); \n     })  \n    }}\n\n\n  deleteCard(id) {\n   return fetch(`https://mesto.nomoreparties.co/v1/cohort-12/cards/${id}`, {\n     method: 'DELETE',\n     headers: this.headers,\n    }) \n    .then(res => {\n     if (res.ok) {\n     return res.json();\n     }\n     // если ошибка, отклоняем промис\n     return Promise.reject(`Ошибка: ${res.status}`);\n   })\n  } \n\nchangeAvatar(avatar) {\n return fetch('https://mesto.nomoreparties.co/v1/cohort-12/users/me/avatar' , {\n  method: 'PATCH',\n  headers: this.headers,\n  body: JSON.stringify({\n    avatar: avatar\n  })\n  })\n  .then(res => {\n   if (res.ok) {\n   return res.json();\n   }\n   // если ошибка, отклоняем промис\n   return Promise.reject(`Ошибка: ${res.status}`);\n })\n}\n}\n// создаем экземпляр \n const api = new Api({ \n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-12/users/me', \n  headers: { \n      authorization: '8eaaf06a-2ca4-4be0-bedd-db145fddf3b1', \n      'Content-Type': 'application/json' \n   } \n}) \n\nexport default api;\n\n"]},"metadata":{},"sourceType":"module"}