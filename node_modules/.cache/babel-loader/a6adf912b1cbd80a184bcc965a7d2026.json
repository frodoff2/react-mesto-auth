{"ast":null,"code":"var _jsxFileName = \"/Users/assetmurzabayev/Desktop/mesto-react/src/components/Elements.js\";\nimport React from 'react';\nimport Main from './Main.js';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext.js';\nimport ImagePopup from './ImagePopup.js';\nimport EditProfilePopup from './EditProfilePopup.js';\nimport EditAvatarPopup from './EditAvatarPopup.js';\nimport AddPlacePopup from './AddPlacePopup.js';\nimport DeletePopup from './DeletePopup.js';\nimport Footer from './Footer.js';\nimport api from '../utils/API.js';\n\nfunction Elements() {\n  const [currentUser, setCurrentUser] = React.useState([]);\n  const [cards, setCards] = React.useState([]);\n  const [deleteCard, setDeleteCard] = React.useState([]);\n  const [isEditProfilePopupOpen, setEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setEditAvatarPopupOpen] = React.useState(false);\n  const [isDeletePopupOpen, setDeletePopupOpen] = React.useState(false);\n  const [selectedCard, setSelectedCard] = React.useState(false);\n  const [bigPopup, setBigPopup] = React.useState([]); // получаем информацию о пользователе\n\n  React.useEffect(() => {\n    api.getInfo().then(res => {\n      setCurrentUser(res);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // получаем карточки от сервера\n\n  React.useEffect(() => {\n    api.getInitialCards().then(data => {\n      setCards(data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // функция для лайков и дизлайков карточки\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id); // Отправляем запрос в API и получаем обновлённые данные карточки\n\n    api.changeLikeCardStatus(`${card._id}`, isLiked).then(newCard => {\n      // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n      const newCards = cards.map(c => c._id === card._id ? newCard : c); // Обновляем стейт\n\n      setCards(newCards);\n    });\n  } // функция для удаления карточки\n\n\n  function handleCardDeleteSubmit() {\n    api.deleteCard(deleteCard._id).then(() => {\n      const newCards = cards.filter(c => c._id !== deleteCard._id);\n      setCards(newCards);\n      closeAllPopups();\n    });\n  } // изменяем информацию о пользователи \n\n\n  function handleUpdateUser({\n    name,\n    about\n  }) {\n    api.editProfile(name, about).then(data => {\n      setCurrentUser(data);\n      closeAllPopups();\n    });\n  } // изменяем аватар\n\n\n  function handleUpdateAvatar({\n    avatar\n  }) {\n    api.changeAvatar(avatar).then(data => {\n      setCurrentUser(data);\n      closeAllPopups();\n    });\n  } // открываем увеличенную карточку\n\n\n  function handleCardClick(props) {\n    setSelectedCard(true);\n    setBigPopup(props);\n  } // открываем попап редактирования информации\n\n\n  function handleEditProfile() {\n    setEditProfilePopupOpen(true);\n  } // открываем попап добавления нового места\n\n\n  function handleAddPlace() {\n    setAddPlacePopupOpen(true);\n    console.log();\n  } // попап редактирования аватарки\n\n\n  function handleEditAvatar() {\n    setEditAvatarPopupOpen(true);\n  } // удаления карточки\n\n\n  function handleDelete(card) {\n    setDeleteCard(card);\n    setDeletePopupOpen(true);\n  }\n\n  function closeAllPopups() {\n    setEditProfilePopupOpen(false);\n    setAddPlacePopupOpen(false);\n    setEditAvatarPopupOpen(false);\n    setSelectedCard(false);\n    setDeletePopupOpen(false);\n  } // добавляем новую карточку\n\n\n  function handleAddPlaceSubmit({\n    name,\n    link\n  }) {\n    api.addNewCard(name, link).then(newCard => {\n      setCards([newCard, ...cards]);\n    });\n    closeAllPopups();\n  }\n\n  return /*#__PURE__*/React.createElement(CurrentUserContext.Provider, {\n    value: currentUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(EditProfilePopup, {\n    isOpen: isEditProfilePopupOpen,\n    onClose: closeAllPopups,\n    onUpdateUser: handleUpdateUser,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(AddPlacePopup, {\n    isOpen: isAddPlacePopupOpen,\n    onClose: closeAllPopups,\n    onAddPlace: handleAddPlaceSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(EditAvatarPopup, {\n    isOpen: isEditAvatarPopupOpen,\n    onClose: closeAllPopups,\n    onUpdateAvatar: handleUpdateAvatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(DeletePopup, {\n    isOpen: isDeletePopupOpen,\n    onClose: closeAllPopups,\n    onSubmit: handleCardDeleteSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(ImagePopup, {\n    card: bigPopup,\n    isOpen: selectedCard,\n    onClose: closeAllPopups,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(Main, {\n    onEditProfile: handleEditProfile,\n    onAddPlace: handleAddPlace,\n    onEditAvatar: handleEditAvatar,\n    cards: cards,\n    cardLike: handleCardLike,\n    onDeleteButton: handleDelete,\n    onCardClick: handleCardClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 3\n    }\n  }));\n}\n\nexport default Elements;","map":{"version":3,"sources":["/Users/assetmurzabayev/Desktop/mesto-react/src/components/Elements.js"],"names":["React","Main","CurrentUserContext","ImagePopup","EditProfilePopup","EditAvatarPopup","AddPlacePopup","DeletePopup","Footer","api","Elements","currentUser","setCurrentUser","useState","cards","setCards","deleteCard","setDeleteCard","isEditProfilePopupOpen","setEditProfilePopupOpen","isAddPlacePopupOpen","setAddPlacePopupOpen","isEditAvatarPopupOpen","setEditAvatarPopupOpen","isDeletePopupOpen","setDeletePopupOpen","selectedCard","setSelectedCard","bigPopup","setBigPopup","useEffect","getInfo","then","res","catch","err","console","log","getInitialCards","data","handleCardLike","card","isLiked","likes","some","i","_id","changeLikeCardStatus","newCard","newCards","map","c","handleCardDeleteSubmit","filter","closeAllPopups","handleUpdateUser","name","about","editProfile","handleUpdateAvatar","avatar","changeAvatar","handleCardClick","props","handleEditProfile","handleAddPlace","handleEditAvatar","handleDelete","handleAddPlaceSubmit","link","addNewCard"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Main from './Main.js';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext.js';\nimport ImagePopup from './ImagePopup.js';\nimport EditProfilePopup from './EditProfilePopup.js';\nimport EditAvatarPopup from './EditAvatarPopup.js';\nimport AddPlacePopup from './AddPlacePopup.js';\nimport DeletePopup from './DeletePopup.js';\nimport Footer from './Footer.js';\nimport api from '../utils/API.js';\n\nfunction Elements() {\n    const [currentUser, setCurrentUser] = React.useState([]);\n    const [cards, setCards] = React.useState([]);\n    const [deleteCard, setDeleteCard] = React.useState([])\n\n    const [isEditProfilePopupOpen, setEditProfilePopupOpen] = React.useState(false);\n    const [isAddPlacePopupOpen, setAddPlacePopupOpen] = React.useState(false);\n    const [isEditAvatarPopupOpen, setEditAvatarPopupOpen] = React.useState(false);\n    const [isDeletePopupOpen, setDeletePopupOpen] = React.useState(false);\n    const [selectedCard, setSelectedCard] = React.useState(false);\n    const [bigPopup, setBigPopup] = React.useState([]);\n  \n        // получаем информацию о пользователе\n  React.useEffect(() => {\n    api.getInfo().then(res => {\n      setCurrentUser(res)\n      })\n      .catch(err => { \n        console.log(err)  \n      }) \n    }, [])\n    \n    \n  // получаем карточки от сервера\n  React.useEffect(() => {\n    api.getInitialCards().then(data => {\n      setCards(data); \n    })\n    .catch(err => { \n      console.log(err)  \n    }) \n  }, []);\n    \n    // функция для лайков и дизлайков карточки\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n     api.changeLikeCardStatus(`${card._id}`, isLiked)\n      .then((newCard) => {\n      // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n      const newCards = cards.map((c) => c._id === card._id ? newCard : c);\n      // Обновляем стейт\n      setCards(newCards);\n    });\n  } \n    // функция для удаления карточки\n  function handleCardDeleteSubmit() {\n    api.deleteCard(deleteCard._id)\n      .then(() => {\n        const newCards = cards.filter((c) => c._id !== deleteCard._id);\n        setCards(newCards);\n        closeAllPopups();\n      });\n    }\n  // изменяем информацию о пользователи \n  function handleUpdateUser({name, about}) {\n    api.editProfile(name, about) \n      .then((data) => {\n        setCurrentUser(data);\n        closeAllPopups();\n      })\n    }\n  // изменяем аватар\n  function handleUpdateAvatar({avatar}) {\n    api.changeAvatar(avatar)\n      .then((data) => {\n        setCurrentUser(data);\n        closeAllPopups();\n      })\n  }\n    // открываем увеличенную карточку\n    function handleCardClick(props) {\n      setSelectedCard(true);\n      setBigPopup(props);\n    }\n    // открываем попап редактирования информации\n    function handleEditProfile() {\n      setEditProfilePopupOpen(true);\n    }\n    // открываем попап добавления нового места\n    function handleAddPlace() {\n      setAddPlacePopupOpen(true);\n      console.log();\n    }\n    // попап редактирования аватарки\n    function handleEditAvatar() {\n      setEditAvatarPopupOpen(true);\n    }\n    // удаления карточки\n    function handleDelete(card) {\n      setDeleteCard(card)\n      setDeletePopupOpen(true)\n    }\n  \n    function closeAllPopups() {\n      setEditProfilePopupOpen(false);\n      setAddPlacePopupOpen(false);\n      setEditAvatarPopupOpen(false);\n      setSelectedCard(false);\n      setDeletePopupOpen(false)\n    }\n  \n    // добавляем новую карточку\n    function handleAddPlaceSubmit({name, link}) {\n      api.addNewCard(name, link)\n        .then((newCard) => {\n          setCards([newCard, ...cards]);\n          })\n        closeAllPopups();\n      }\n\nreturn(\n  <CurrentUserContext.Provider value={currentUser}>  \n  <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} />\n\n<AddPlacePopup isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} onAddPlace={handleAddPlaceSubmit}/>\n      \n<EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar}/>\n \n<DeletePopup isOpen={isDeletePopupOpen} onClose={closeAllPopups} onSubmit={handleCardDeleteSubmit}  />\n\n<ImagePopup card={bigPopup} isOpen={selectedCard} onClose={closeAllPopups}/>\n\n  <Main      \n                onEditProfile={handleEditProfile} \n                onAddPlace={handleAddPlace} \n                onEditAvatar={handleEditAvatar}\n                cards={cards}  \n              cardLike={handleCardLike} \n              onDeleteButton={handleDelete} \n              onCardClick={handleCardClick}\n  />\n  \n  <Footer />\n\n</CurrentUserContext.Provider>\n\n  );\n}\n\nexport default Elements;"]},"metadata":{},"sourceType":"module"}